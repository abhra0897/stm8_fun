                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _ws2812_send_pixel_24bits
                                     13 	.globl _ws2812_send_latch
                                     14 	.globl _ws2812_gpio_config
                                     15 	.globl _flash_read_from_addr
                                     16 	.globl _spi_config
                                     17 	.globl _strlen
                                     18 	.globl _get_next_color
                                     19 	.globl _uart_init
                                     20 	.globl _uart_write
                                     21 	.globl _uart_write_8bits
                                     22 	.globl _int_to_hex_str
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area INITIALIZED
                                     31 ;--------------------------------------------------------
                                     32 ; Stack segment in internal ram 
                                     33 ;--------------------------------------------------------
                                     34 	.area	SSEG
      000000                         35 __start__stack:
      000000                         36 	.ds	1
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 
                                     43 ; default segment ordering for linker
                                     44 	.area HOME
                                     45 	.area GSINIT
                                     46 	.area GSFINAL
                                     47 	.area CONST
                                     48 	.area INITIALIZER
                                     49 	.area CODE
                                     50 
                                     51 ;--------------------------------------------------------
                                     52 ; interrupt vector 
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
      000000                         55 __interrupt_vect:
      000000 82v00u00u00             56 	int s_GSINIT ; reset
                                     57 ;--------------------------------------------------------
                                     58 ; global & static initialisations
                                     59 ;--------------------------------------------------------
                                     60 	.area HOME
                                     61 	.area GSINIT
                                     62 	.area GSFINAL
                                     63 	.area GSINIT
      000000                         64 __sdcc_gs_init_startup:
      000000                         65 __sdcc_init_data:
                                     66 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   67 	ldw x, #l_DATA
      000003 27 07            [ 1]   68 	jreq	00002$
      000005                         69 00001$:
      000005 72 4FuFFuFF      [ 1]   70 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   71 	decw x
      00000A 26 F9            [ 1]   72 	jrne	00001$
      00000C                         73 00002$:
      00000C AEr00r00         [ 2]   74 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   75 	jreq	00004$
      000011                         76 00003$:
      000011 D6uFFuFF         [ 1]   77 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   78 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   79 	decw	x
      000018 26 F7            [ 1]   80 	jrne	00003$
      00001A                         81 00004$:
                                     82 ; stm8_genXINIT() end
                                     83 	.area GSFINAL
      000000 CCr00r04         [ 2]   84 	jp	__sdcc_program_startup
                                     85 ;--------------------------------------------------------
                                     86 ; Home
                                     87 ;--------------------------------------------------------
                                     88 	.area HOME
                                     89 	.area HOME
      000004                         90 __sdcc_program_startup:
      000004 CCr00r00         [ 2]   91 	jp	_main
                                     92 ;	return from main will return to caller
                                     93 ;--------------------------------------------------------
                                     94 ; code
                                     95 ;--------------------------------------------------------
                                     96 	.area CODE
                                     97 ;	src/main.c: 16: void main(void)
                                     98 ;	-----------------------------------------
                                     99 ;	 function main
                                    100 ;	-----------------------------------------
      000000                        101 _main:
      000000 90 96            [ 1]  102 	ldw	y, sp
      000002 72 A2 00 96      [ 2]  103 	subw	y, #150
      000006 52 FF            [ 2]  104 	sub	sp, #255
      000008 52 8A            [ 2]  105 	sub	sp, #138
                                    106 ;	src/main.c: 19: CLK_CKDIVR = 0;
      00000A 35 00 50 C6      [ 1]  107 	mov	0x50c6+0, #0x00
                                    108 ;	src/main.c: 20: uart_init();
      00000E 90 89            [ 2]  109 	pushw	y
      000010 CDr04rA9         [ 4]  110 	call	_uart_init
      000013 90 85            [ 2]  111 	popw	y
                                    112 ;	src/main.c: 22: uint8_t buff[100] = {0};
      000015 0F 01            [ 1]  113 	clr	(0x01, sp)
      000017 96               [ 1]  114 	ldw	x, sp
      000018 6F 02            [ 1]  115 	clr	(2, x)
      00001A 96               [ 1]  116 	ldw	x, sp
      00001B 6F 03            [ 1]  117 	clr	(3, x)
      00001D 96               [ 1]  118 	ldw	x, sp
      00001E 6F 04            [ 1]  119 	clr	(4, x)
      000020 96               [ 1]  120 	ldw	x, sp
      000021 6F 05            [ 1]  121 	clr	(5, x)
      000023 96               [ 1]  122 	ldw	x, sp
      000024 6F 06            [ 1]  123 	clr	(6, x)
      000026 96               [ 1]  124 	ldw	x, sp
      000027 6F 07            [ 1]  125 	clr	(7, x)
      000029 96               [ 1]  126 	ldw	x, sp
      00002A 6F 08            [ 1]  127 	clr	(8, x)
      00002C 96               [ 1]  128 	ldw	x, sp
      00002D 6F 09            [ 1]  129 	clr	(9, x)
      00002F 96               [ 1]  130 	ldw	x, sp
      000030 6F 0A            [ 1]  131 	clr	(10, x)
      000032 96               [ 1]  132 	ldw	x, sp
      000033 6F 0B            [ 1]  133 	clr	(11, x)
      000035 96               [ 1]  134 	ldw	x, sp
      000036 6F 0C            [ 1]  135 	clr	(12, x)
      000038 96               [ 1]  136 	ldw	x, sp
      000039 6F 0D            [ 1]  137 	clr	(13, x)
      00003B 96               [ 1]  138 	ldw	x, sp
      00003C 6F 0E            [ 1]  139 	clr	(14, x)
      00003E 96               [ 1]  140 	ldw	x, sp
      00003F 6F 0F            [ 1]  141 	clr	(15, x)
      000041 96               [ 1]  142 	ldw	x, sp
      000042 6F 10            [ 1]  143 	clr	(16, x)
      000044 96               [ 1]  144 	ldw	x, sp
      000045 6F 11            [ 1]  145 	clr	(17, x)
      000047 96               [ 1]  146 	ldw	x, sp
      000048 6F 12            [ 1]  147 	clr	(18, x)
      00004A 96               [ 1]  148 	ldw	x, sp
      00004B 6F 13            [ 1]  149 	clr	(19, x)
      00004D 96               [ 1]  150 	ldw	x, sp
      00004E 6F 14            [ 1]  151 	clr	(20, x)
      000050 96               [ 1]  152 	ldw	x, sp
      000051 6F 15            [ 1]  153 	clr	(21, x)
      000053 96               [ 1]  154 	ldw	x, sp
      000054 6F 16            [ 1]  155 	clr	(22, x)
      000056 96               [ 1]  156 	ldw	x, sp
      000057 6F 17            [ 1]  157 	clr	(23, x)
      000059 96               [ 1]  158 	ldw	x, sp
      00005A 6F 18            [ 1]  159 	clr	(24, x)
      00005C 96               [ 1]  160 	ldw	x, sp
      00005D 6F 19            [ 1]  161 	clr	(25, x)
      00005F 96               [ 1]  162 	ldw	x, sp
      000060 6F 1A            [ 1]  163 	clr	(26, x)
      000062 96               [ 1]  164 	ldw	x, sp
      000063 6F 1B            [ 1]  165 	clr	(27, x)
      000065 96               [ 1]  166 	ldw	x, sp
      000066 6F 1C            [ 1]  167 	clr	(28, x)
      000068 96               [ 1]  168 	ldw	x, sp
      000069 6F 1D            [ 1]  169 	clr	(29, x)
      00006B 96               [ 1]  170 	ldw	x, sp
      00006C 6F 1E            [ 1]  171 	clr	(30, x)
      00006E 96               [ 1]  172 	ldw	x, sp
      00006F 6F 1F            [ 1]  173 	clr	(31, x)
      000071 96               [ 1]  174 	ldw	x, sp
      000072 6F 20            [ 1]  175 	clr	(32, x)
      000074 96               [ 1]  176 	ldw	x, sp
      000075 6F 21            [ 1]  177 	clr	(33, x)
      000077 96               [ 1]  178 	ldw	x, sp
      000078 6F 22            [ 1]  179 	clr	(34, x)
      00007A 96               [ 1]  180 	ldw	x, sp
      00007B 6F 23            [ 1]  181 	clr	(35, x)
      00007D 96               [ 1]  182 	ldw	x, sp
      00007E 6F 24            [ 1]  183 	clr	(36, x)
      000080 96               [ 1]  184 	ldw	x, sp
      000081 6F 25            [ 1]  185 	clr	(37, x)
      000083 96               [ 1]  186 	ldw	x, sp
      000084 6F 26            [ 1]  187 	clr	(38, x)
      000086 96               [ 1]  188 	ldw	x, sp
      000087 6F 27            [ 1]  189 	clr	(39, x)
      000089 96               [ 1]  190 	ldw	x, sp
      00008A 6F 28            [ 1]  191 	clr	(40, x)
      00008C 96               [ 1]  192 	ldw	x, sp
      00008D 6F 29            [ 1]  193 	clr	(41, x)
      00008F 96               [ 1]  194 	ldw	x, sp
      000090 6F 2A            [ 1]  195 	clr	(42, x)
      000092 96               [ 1]  196 	ldw	x, sp
      000093 6F 2B            [ 1]  197 	clr	(43, x)
      000095 96               [ 1]  198 	ldw	x, sp
      000096 6F 2C            [ 1]  199 	clr	(44, x)
      000098 96               [ 1]  200 	ldw	x, sp
      000099 6F 2D            [ 1]  201 	clr	(45, x)
      00009B 96               [ 1]  202 	ldw	x, sp
      00009C 6F 2E            [ 1]  203 	clr	(46, x)
      00009E 96               [ 1]  204 	ldw	x, sp
      00009F 6F 2F            [ 1]  205 	clr	(47, x)
      0000A1 96               [ 1]  206 	ldw	x, sp
      0000A2 6F 30            [ 1]  207 	clr	(48, x)
      0000A4 96               [ 1]  208 	ldw	x, sp
      0000A5 6F 31            [ 1]  209 	clr	(49, x)
      0000A7 96               [ 1]  210 	ldw	x, sp
      0000A8 6F 32            [ 1]  211 	clr	(50, x)
      0000AA 96               [ 1]  212 	ldw	x, sp
      0000AB 6F 33            [ 1]  213 	clr	(51, x)
      0000AD 96               [ 1]  214 	ldw	x, sp
      0000AE 6F 34            [ 1]  215 	clr	(52, x)
      0000B0 96               [ 1]  216 	ldw	x, sp
      0000B1 6F 35            [ 1]  217 	clr	(53, x)
      0000B3 96               [ 1]  218 	ldw	x, sp
      0000B4 6F 36            [ 1]  219 	clr	(54, x)
      0000B6 96               [ 1]  220 	ldw	x, sp
      0000B7 6F 37            [ 1]  221 	clr	(55, x)
      0000B9 96               [ 1]  222 	ldw	x, sp
      0000BA 6F 38            [ 1]  223 	clr	(56, x)
      0000BC 96               [ 1]  224 	ldw	x, sp
      0000BD 6F 39            [ 1]  225 	clr	(57, x)
      0000BF 96               [ 1]  226 	ldw	x, sp
      0000C0 6F 3A            [ 1]  227 	clr	(58, x)
      0000C2 96               [ 1]  228 	ldw	x, sp
      0000C3 6F 3B            [ 1]  229 	clr	(59, x)
      0000C5 96               [ 1]  230 	ldw	x, sp
      0000C6 6F 3C            [ 1]  231 	clr	(60, x)
      0000C8 96               [ 1]  232 	ldw	x, sp
      0000C9 6F 3D            [ 1]  233 	clr	(61, x)
      0000CB 96               [ 1]  234 	ldw	x, sp
      0000CC 6F 3E            [ 1]  235 	clr	(62, x)
      0000CE 96               [ 1]  236 	ldw	x, sp
      0000CF 6F 3F            [ 1]  237 	clr	(63, x)
      0000D1 96               [ 1]  238 	ldw	x, sp
      0000D2 6F 40            [ 1]  239 	clr	(64, x)
      0000D4 96               [ 1]  240 	ldw	x, sp
      0000D5 6F 41            [ 1]  241 	clr	(65, x)
      0000D7 96               [ 1]  242 	ldw	x, sp
      0000D8 6F 42            [ 1]  243 	clr	(66, x)
      0000DA 96               [ 1]  244 	ldw	x, sp
      0000DB 6F 43            [ 1]  245 	clr	(67, x)
      0000DD 96               [ 1]  246 	ldw	x, sp
      0000DE 6F 44            [ 1]  247 	clr	(68, x)
      0000E0 96               [ 1]  248 	ldw	x, sp
      0000E1 6F 45            [ 1]  249 	clr	(69, x)
      0000E3 96               [ 1]  250 	ldw	x, sp
      0000E4 6F 46            [ 1]  251 	clr	(70, x)
      0000E6 96               [ 1]  252 	ldw	x, sp
      0000E7 6F 47            [ 1]  253 	clr	(71, x)
      0000E9 96               [ 1]  254 	ldw	x, sp
      0000EA 6F 48            [ 1]  255 	clr	(72, x)
      0000EC 96               [ 1]  256 	ldw	x, sp
      0000ED 6F 49            [ 1]  257 	clr	(73, x)
      0000EF 96               [ 1]  258 	ldw	x, sp
      0000F0 6F 4A            [ 1]  259 	clr	(74, x)
      0000F2 96               [ 1]  260 	ldw	x, sp
      0000F3 6F 4B            [ 1]  261 	clr	(75, x)
      0000F5 96               [ 1]  262 	ldw	x, sp
      0000F6 6F 4C            [ 1]  263 	clr	(76, x)
      0000F8 96               [ 1]  264 	ldw	x, sp
      0000F9 6F 4D            [ 1]  265 	clr	(77, x)
      0000FB 96               [ 1]  266 	ldw	x, sp
      0000FC 6F 4E            [ 1]  267 	clr	(78, x)
      0000FE 96               [ 1]  268 	ldw	x, sp
      0000FF 6F 4F            [ 1]  269 	clr	(79, x)
      000101 96               [ 1]  270 	ldw	x, sp
      000102 6F 50            [ 1]  271 	clr	(80, x)
      000104 96               [ 1]  272 	ldw	x, sp
      000105 6F 51            [ 1]  273 	clr	(81, x)
      000107 96               [ 1]  274 	ldw	x, sp
      000108 6F 52            [ 1]  275 	clr	(82, x)
      00010A 96               [ 1]  276 	ldw	x, sp
      00010B 6F 53            [ 1]  277 	clr	(83, x)
      00010D 96               [ 1]  278 	ldw	x, sp
      00010E 6F 54            [ 1]  279 	clr	(84, x)
      000110 96               [ 1]  280 	ldw	x, sp
      000111 6F 55            [ 1]  281 	clr	(85, x)
      000113 96               [ 1]  282 	ldw	x, sp
      000114 6F 56            [ 1]  283 	clr	(86, x)
      000116 96               [ 1]  284 	ldw	x, sp
      000117 6F 57            [ 1]  285 	clr	(87, x)
      000119 96               [ 1]  286 	ldw	x, sp
      00011A 6F 58            [ 1]  287 	clr	(88, x)
      00011C 96               [ 1]  288 	ldw	x, sp
      00011D 6F 59            [ 1]  289 	clr	(89, x)
      00011F 96               [ 1]  290 	ldw	x, sp
      000120 6F 5A            [ 1]  291 	clr	(90, x)
      000122 96               [ 1]  292 	ldw	x, sp
      000123 6F 5B            [ 1]  293 	clr	(91, x)
      000125 96               [ 1]  294 	ldw	x, sp
      000126 6F 5C            [ 1]  295 	clr	(92, x)
      000128 96               [ 1]  296 	ldw	x, sp
      000129 6F 5D            [ 1]  297 	clr	(93, x)
      00012B 96               [ 1]  298 	ldw	x, sp
      00012C 6F 5E            [ 1]  299 	clr	(94, x)
      00012E 96               [ 1]  300 	ldw	x, sp
      00012F 6F 5F            [ 1]  301 	clr	(95, x)
      000131 96               [ 1]  302 	ldw	x, sp
      000132 6F 60            [ 1]  303 	clr	(96, x)
      000134 96               [ 1]  304 	ldw	x, sp
      000135 6F 61            [ 1]  305 	clr	(97, x)
      000137 96               [ 1]  306 	ldw	x, sp
      000138 6F 62            [ 1]  307 	clr	(98, x)
      00013A 96               [ 1]  308 	ldw	x, sp
      00013B 6F 63            [ 1]  309 	clr	(99, x)
      00013D 96               [ 1]  310 	ldw	x, sp
      00013E 6F 64            [ 1]  311 	clr	(100, x)
                                    312 ;	src/main.c: 23: uint8_t buff2[100] = {0};
      000140 0F 65            [ 1]  313 	clr	(0x65, sp)
      000142 96               [ 1]  314 	ldw	x, sp
      000143 6F 66            [ 1]  315 	clr	(102, x)
      000145 96               [ 1]  316 	ldw	x, sp
      000146 6F 67            [ 1]  317 	clr	(103, x)
      000148 96               [ 1]  318 	ldw	x, sp
      000149 6F 68            [ 1]  319 	clr	(104, x)
      00014B 96               [ 1]  320 	ldw	x, sp
      00014C 6F 69            [ 1]  321 	clr	(105, x)
      00014E 96               [ 1]  322 	ldw	x, sp
      00014F 6F 6A            [ 1]  323 	clr	(106, x)
      000151 96               [ 1]  324 	ldw	x, sp
      000152 6F 6B            [ 1]  325 	clr	(107, x)
      000154 96               [ 1]  326 	ldw	x, sp
      000155 6F 6C            [ 1]  327 	clr	(108, x)
      000157 96               [ 1]  328 	ldw	x, sp
      000158 6F 6D            [ 1]  329 	clr	(109, x)
      00015A 96               [ 1]  330 	ldw	x, sp
      00015B 6F 6E            [ 1]  331 	clr	(110, x)
      00015D 96               [ 1]  332 	ldw	x, sp
      00015E 6F 6F            [ 1]  333 	clr	(111, x)
      000160 96               [ 1]  334 	ldw	x, sp
      000161 6F 70            [ 1]  335 	clr	(112, x)
      000163 96               [ 1]  336 	ldw	x, sp
      000164 6F 71            [ 1]  337 	clr	(113, x)
      000166 96               [ 1]  338 	ldw	x, sp
      000167 6F 72            [ 1]  339 	clr	(114, x)
      000169 96               [ 1]  340 	ldw	x, sp
      00016A 6F 73            [ 1]  341 	clr	(115, x)
      00016C 96               [ 1]  342 	ldw	x, sp
      00016D 6F 74            [ 1]  343 	clr	(116, x)
      00016F 96               [ 1]  344 	ldw	x, sp
      000170 6F 75            [ 1]  345 	clr	(117, x)
      000172 96               [ 1]  346 	ldw	x, sp
      000173 6F 76            [ 1]  347 	clr	(118, x)
      000175 96               [ 1]  348 	ldw	x, sp
      000176 6F 77            [ 1]  349 	clr	(119, x)
      000178 96               [ 1]  350 	ldw	x, sp
      000179 6F 78            [ 1]  351 	clr	(120, x)
      00017B 96               [ 1]  352 	ldw	x, sp
      00017C 6F 79            [ 1]  353 	clr	(121, x)
      00017E 96               [ 1]  354 	ldw	x, sp
      00017F 6F 7A            [ 1]  355 	clr	(122, x)
      000181 96               [ 1]  356 	ldw	x, sp
      000182 6F 7B            [ 1]  357 	clr	(123, x)
      000184 96               [ 1]  358 	ldw	x, sp
      000185 6F 7C            [ 1]  359 	clr	(124, x)
      000187 96               [ 1]  360 	ldw	x, sp
      000188 6F 7D            [ 1]  361 	clr	(125, x)
      00018A 96               [ 1]  362 	ldw	x, sp
      00018B 6F 7E            [ 1]  363 	clr	(126, x)
      00018D 96               [ 1]  364 	ldw	x, sp
      00018E 6F 7F            [ 1]  365 	clr	(127, x)
      000190 96               [ 1]  366 	ldw	x, sp
      000191 6F 80            [ 1]  367 	clr	(128, x)
      000193 96               [ 1]  368 	ldw	x, sp
      000194 6F 81            [ 1]  369 	clr	(129, x)
      000196 96               [ 1]  370 	ldw	x, sp
      000197 6F 82            [ 1]  371 	clr	(130, x)
      000199 96               [ 1]  372 	ldw	x, sp
      00019A 6F 83            [ 1]  373 	clr	(131, x)
      00019C 96               [ 1]  374 	ldw	x, sp
      00019D 6F 84            [ 1]  375 	clr	(132, x)
      00019F 96               [ 1]  376 	ldw	x, sp
      0001A0 6F 85            [ 1]  377 	clr	(133, x)
      0001A2 96               [ 1]  378 	ldw	x, sp
      0001A3 6F 86            [ 1]  379 	clr	(134, x)
      0001A5 96               [ 1]  380 	ldw	x, sp
      0001A6 6F 87            [ 1]  381 	clr	(135, x)
      0001A8 96               [ 1]  382 	ldw	x, sp
      0001A9 6F 88            [ 1]  383 	clr	(136, x)
      0001AB 96               [ 1]  384 	ldw	x, sp
      0001AC 6F 89            [ 1]  385 	clr	(137, x)
      0001AE 96               [ 1]  386 	ldw	x, sp
      0001AF 6F 8A            [ 1]  387 	clr	(138, x)
      0001B1 96               [ 1]  388 	ldw	x, sp
      0001B2 6F 8B            [ 1]  389 	clr	(139, x)
      0001B4 96               [ 1]  390 	ldw	x, sp
      0001B5 6F 8C            [ 1]  391 	clr	(140, x)
      0001B7 96               [ 1]  392 	ldw	x, sp
      0001B8 6F 8D            [ 1]  393 	clr	(141, x)
      0001BA 96               [ 1]  394 	ldw	x, sp
      0001BB 6F 8E            [ 1]  395 	clr	(142, x)
      0001BD 96               [ 1]  396 	ldw	x, sp
      0001BE 6F 8F            [ 1]  397 	clr	(143, x)
      0001C0 96               [ 1]  398 	ldw	x, sp
      0001C1 6F 90            [ 1]  399 	clr	(144, x)
      0001C3 96               [ 1]  400 	ldw	x, sp
      0001C4 6F 91            [ 1]  401 	clr	(145, x)
      0001C6 96               [ 1]  402 	ldw	x, sp
      0001C7 6F 92            [ 1]  403 	clr	(146, x)
      0001C9 96               [ 1]  404 	ldw	x, sp
      0001CA 6F 93            [ 1]  405 	clr	(147, x)
      0001CC 96               [ 1]  406 	ldw	x, sp
      0001CD 6F 94            [ 1]  407 	clr	(148, x)
      0001CF 96               [ 1]  408 	ldw	x, sp
      0001D0 6F 95            [ 1]  409 	clr	(149, x)
      0001D2 96               [ 1]  410 	ldw	x, sp
      0001D3 6F 96            [ 1]  411 	clr	(150, x)
      0001D5 96               [ 1]  412 	ldw	x, sp
      0001D6 6F 97            [ 1]  413 	clr	(151, x)
      0001D8 96               [ 1]  414 	ldw	x, sp
      0001D9 6F 98            [ 1]  415 	clr	(152, x)
      0001DB 96               [ 1]  416 	ldw	x, sp
      0001DC 6F 99            [ 1]  417 	clr	(153, x)
      0001DE 96               [ 1]  418 	ldw	x, sp
      0001DF 6F 9A            [ 1]  419 	clr	(154, x)
      0001E1 96               [ 1]  420 	ldw	x, sp
      0001E2 6F 9B            [ 1]  421 	clr	(155, x)
      0001E4 96               [ 1]  422 	ldw	x, sp
      0001E5 6F 9C            [ 1]  423 	clr	(156, x)
      0001E7 96               [ 1]  424 	ldw	x, sp
      0001E8 6F 9D            [ 1]  425 	clr	(157, x)
      0001EA 96               [ 1]  426 	ldw	x, sp
      0001EB 6F 9E            [ 1]  427 	clr	(158, x)
      0001ED 96               [ 1]  428 	ldw	x, sp
      0001EE 6F 9F            [ 1]  429 	clr	(159, x)
      0001F0 96               [ 1]  430 	ldw	x, sp
      0001F1 6F A0            [ 1]  431 	clr	(160, x)
      0001F3 96               [ 1]  432 	ldw	x, sp
      0001F4 6F A1            [ 1]  433 	clr	(161, x)
      0001F6 96               [ 1]  434 	ldw	x, sp
      0001F7 6F A2            [ 1]  435 	clr	(162, x)
      0001F9 96               [ 1]  436 	ldw	x, sp
      0001FA 6F A3            [ 1]  437 	clr	(163, x)
      0001FC 96               [ 1]  438 	ldw	x, sp
      0001FD 6F A4            [ 1]  439 	clr	(164, x)
      0001FF 96               [ 1]  440 	ldw	x, sp
      000200 6F A5            [ 1]  441 	clr	(165, x)
      000202 96               [ 1]  442 	ldw	x, sp
      000203 6F A6            [ 1]  443 	clr	(166, x)
      000205 96               [ 1]  444 	ldw	x, sp
      000206 6F A7            [ 1]  445 	clr	(167, x)
      000208 96               [ 1]  446 	ldw	x, sp
      000209 6F A8            [ 1]  447 	clr	(168, x)
      00020B 96               [ 1]  448 	ldw	x, sp
      00020C 6F A9            [ 1]  449 	clr	(169, x)
      00020E 96               [ 1]  450 	ldw	x, sp
      00020F 6F AA            [ 1]  451 	clr	(170, x)
      000211 96               [ 1]  452 	ldw	x, sp
      000212 6F AB            [ 1]  453 	clr	(171, x)
      000214 96               [ 1]  454 	ldw	x, sp
      000215 6F AC            [ 1]  455 	clr	(172, x)
      000217 96               [ 1]  456 	ldw	x, sp
      000218 6F AD            [ 1]  457 	clr	(173, x)
      00021A 96               [ 1]  458 	ldw	x, sp
      00021B 6F AE            [ 1]  459 	clr	(174, x)
      00021D 96               [ 1]  460 	ldw	x, sp
      00021E 6F AF            [ 1]  461 	clr	(175, x)
      000220 96               [ 1]  462 	ldw	x, sp
      000221 6F B0            [ 1]  463 	clr	(176, x)
      000223 96               [ 1]  464 	ldw	x, sp
      000224 6F B1            [ 1]  465 	clr	(177, x)
      000226 96               [ 1]  466 	ldw	x, sp
      000227 6F B2            [ 1]  467 	clr	(178, x)
      000229 96               [ 1]  468 	ldw	x, sp
      00022A 6F B3            [ 1]  469 	clr	(179, x)
      00022C 96               [ 1]  470 	ldw	x, sp
      00022D 6F B4            [ 1]  471 	clr	(180, x)
      00022F 96               [ 1]  472 	ldw	x, sp
      000230 6F B5            [ 1]  473 	clr	(181, x)
      000232 96               [ 1]  474 	ldw	x, sp
      000233 6F B6            [ 1]  475 	clr	(182, x)
      000235 96               [ 1]  476 	ldw	x, sp
      000236 6F B7            [ 1]  477 	clr	(183, x)
      000238 96               [ 1]  478 	ldw	x, sp
      000239 6F B8            [ 1]  479 	clr	(184, x)
      00023B 96               [ 1]  480 	ldw	x, sp
      00023C 6F B9            [ 1]  481 	clr	(185, x)
      00023E 96               [ 1]  482 	ldw	x, sp
      00023F 6F BA            [ 1]  483 	clr	(186, x)
      000241 96               [ 1]  484 	ldw	x, sp
      000242 6F BB            [ 1]  485 	clr	(187, x)
      000244 96               [ 1]  486 	ldw	x, sp
      000245 6F BC            [ 1]  487 	clr	(188, x)
      000247 96               [ 1]  488 	ldw	x, sp
      000248 6F BD            [ 1]  489 	clr	(189, x)
      00024A 96               [ 1]  490 	ldw	x, sp
      00024B 6F BE            [ 1]  491 	clr	(190, x)
      00024D 96               [ 1]  492 	ldw	x, sp
      00024E 6F BF            [ 1]  493 	clr	(191, x)
      000250 96               [ 1]  494 	ldw	x, sp
      000251 6F C0            [ 1]  495 	clr	(192, x)
      000253 96               [ 1]  496 	ldw	x, sp
      000254 6F C1            [ 1]  497 	clr	(193, x)
      000256 96               [ 1]  498 	ldw	x, sp
      000257 6F C2            [ 1]  499 	clr	(194, x)
      000259 96               [ 1]  500 	ldw	x, sp
      00025A 6F C3            [ 1]  501 	clr	(195, x)
      00025C 96               [ 1]  502 	ldw	x, sp
      00025D 6F C4            [ 1]  503 	clr	(196, x)
      00025F 96               [ 1]  504 	ldw	x, sp
      000260 6F C5            [ 1]  505 	clr	(197, x)
      000262 96               [ 1]  506 	ldw	x, sp
      000263 6F C6            [ 1]  507 	clr	(198, x)
      000265 96               [ 1]  508 	ldw	x, sp
      000266 6F C7            [ 1]  509 	clr	(199, x)
      000268 96               [ 1]  510 	ldw	x, sp
      000269 6F C8            [ 1]  511 	clr	(200, x)
                                    512 ;	src/main.c: 24: for (uint8_t i = 0; i < 100; i++)
      00026B 4F               [ 1]  513 	clr	a
      00026C                        514 00112$:
      00026C A1 64            [ 1]  515 	cp	a, #0x64
      00026E 24 0E            [ 1]  516 	jrnc	00101$
                                    517 ;	src/main.c: 26: buff[i] = i/* +7+'0' */;
      000270 96               [ 1]  518 	ldw	x, sp
      000271 5C               [ 1]  519 	incw	x
      000272 89               [ 2]  520 	pushw	x
      000273 5F               [ 1]  521 	clrw	x
      000274 97               [ 1]  522 	ld	xl, a
      000275 72 FB 01         [ 2]  523 	addw	x, (1, sp)
      000278 5B 02            [ 2]  524 	addw	sp, #2
      00027A F7               [ 1]  525 	ld	(x), a
                                    526 ;	src/main.c: 24: for (uint8_t i = 0; i < 100; i++)
      00027B 4C               [ 1]  527 	inc	a
      00027C 20 EE            [ 2]  528 	jra	00112$
      00027E                        529 00101$:
                                    530 ;	src/main.c: 29: ws2812_gpio_config();
      00027E 90 89            [ 2]  531 	pushw	y
      000280 CDr00r00         [ 4]  532 	call	_ws2812_gpio_config
      000283 CDr00r00         [ 4]  533 	call	_spi_config
      000286 4B 99            [ 1]  534 	push	#0x99
      000288 CDr04rEF         [ 4]  535 	call	_uart_write_8bits
      00028B 84               [ 1]  536 	pop	a
      00028C 4B 64            [ 1]  537 	push	#0x64
      00028E 4B 00            [ 1]  538 	push	#0x00
      000290 96               [ 1]  539 	ldw	x, sp
      000291 1C 00 69         [ 2]  540 	addw	x, #105
      000294 89               [ 2]  541 	pushw	x
      000295 4B 45            [ 1]  542 	push	#0x45
      000297 4B 23            [ 1]  543 	push	#0x23
      000299 4B 01            [ 1]  544 	push	#0x01
      00029B 4B 00            [ 1]  545 	push	#0x00
      00029D CDr00r00         [ 4]  546 	call	_flash_read_from_addr
      0002A0 5B 08            [ 2]  547 	addw	sp, #8
      0002A2 90 85            [ 2]  548 	popw	y
                                    549 ;	src/main.c: 46: char hex_string[2] = {0};
      0002A4 0F C9            [ 1]  550 	clr	(0xc9, sp)
      0002A6 96               [ 1]  551 	ldw	x, sp
      0002A7 1C 00 CA         [ 2]  552 	addw	x, #202
      0002AA 7F               [ 1]  553 	clr	(x)
                                    554 ;	src/main.c: 49: uint8_t red = 255, green = 0, blue = 0;
      0002AB A6 FF            [ 1]  555 	ld	a, #0xff
      0002AD 6B CB            [ 1]  556 	ld	(0xcb, sp), a
      0002AF 0F CC            [ 1]  557 	clr	(0xcc, sp)
      0002B1 0F CD            [ 1]  558 	clr	(0xcd, sp)
                                    559 ;	src/main.c: 50: uint8_t r_temp = red, g_temp = green, b_temp = blue;
      0002B3 A6 FF            [ 1]  560 	ld	a, #0xff
      0002B5 6B CE            [ 1]  561 	ld	(0xce, sp), a
      0002B7 0F CF            [ 1]  562 	clr	(0xcf, sp)
      0002B9 0F D0            [ 1]  563 	clr	(0xd0, sp)
                                    564 ;	src/main.c: 58: for (uint8_t led_cnt = 0; led_cnt < 60; led_cnt++)
      0002BB                        565 00128$:
      0002BB 90 6F 96         [ 1]  566 	clr	(0x96, y)
      0002BE                        567 00115$:
      0002BE 90 E6 96         [ 1]  568 	ld	a, (0x96, y)
      0002C1 A1 3C            [ 1]  569 	cp	a, #0x3c
      0002C3 24 58            [ 1]  570 	jrnc	00102$
                                    571 ;	src/main.c: 60: get_next_color(&r_temp, &g_temp, &b_temp, 10);
      0002C5 90 89            [ 2]  572 	pushw	y
      0002C7 4B 0A            [ 1]  573 	push	#0x0a
      0002C9 96               [ 1]  574 	ldw	x, sp
      0002CA 1C 00 D3         [ 2]  575 	addw	x, #211
      0002CD 89               [ 2]  576 	pushw	x
      0002CE 96               [ 1]  577 	ldw	x, sp
      0002CF 1C 00 D4         [ 2]  578 	addw	x, #212
      0002D2 89               [ 2]  579 	pushw	x
      0002D3 96               [ 1]  580 	ldw	x, sp
      0002D4 1C 00 D5         [ 2]  581 	addw	x, #213
      0002D7 89               [ 2]  582 	pushw	x
      0002D8 CDr03rCA         [ 4]  583 	call	_get_next_color
      0002DB 5B 07            [ 2]  584 	addw	sp, #7
      0002DD 90 85            [ 2]  585 	popw	y
                                    586 ;	src/main.c: 61: color_buff[led_cnt][0] = r_temp;
      0002DF 90 E6 96         [ 1]  587 	ld	a, (0x96, y)
      0002E2 97               [ 1]  588 	ld	xl, a
      0002E3 A6 03            [ 1]  589 	ld	a, #0x03
      0002E5 42               [ 4]  590 	mul	x, a
      0002E6 90 EF 92         [ 2]  591 	ldw	(0x92, y), x
      0002E9 93               [ 1]  592 	ldw	x, y
      0002EA EE 92            [ 2]  593 	ldw	x, (0x92, x)
      0002EC 89               [ 2]  594 	pushw	x
      0002ED 96               [ 1]  595 	ldw	x, sp
      0002EE 1C 00 D3         [ 2]  596 	addw	x, #211
      0002F1 72 FB 01         [ 2]  597 	addw	x, (1, sp)
      0002F4 5B 02            [ 2]  598 	addw	sp, #2
      0002F6 7B CE            [ 1]  599 	ld	a, (0xce, sp)
      0002F8 F7               [ 1]  600 	ld	(x), a
                                    601 ;	src/main.c: 62: color_buff[led_cnt][1] = g_temp;
      0002F9 93               [ 1]  602 	ldw	x, y
      0002FA EE 92            [ 2]  603 	ldw	x, (0x92, x)
      0002FC 89               [ 2]  604 	pushw	x
      0002FD 96               [ 1]  605 	ldw	x, sp
      0002FE 1C 00 D3         [ 2]  606 	addw	x, #211
      000301 72 FB 01         [ 2]  607 	addw	x, (1, sp)
      000304 90 EF 94         [ 2]  608 	ldw	(0x94, y), x
      000307 5B 02            [ 2]  609 	addw	sp, #2
      000309 93               [ 1]  610 	ldw	x, y
      00030A EE 94            [ 2]  611 	ldw	x, (0x94, x)
      00030C 5C               [ 1]  612 	incw	x
      00030D 7B CF            [ 1]  613 	ld	a, (0xcf, sp)
      00030F F7               [ 1]  614 	ld	(x), a
                                    615 ;	src/main.c: 63: color_buff[led_cnt][2] = b_temp;
      000310 93               [ 1]  616 	ldw	x, y
      000311 EE 94            [ 2]  617 	ldw	x, (0x94, x)
      000313 5C               [ 1]  618 	incw	x
      000314 5C               [ 1]  619 	incw	x
      000315 7B D0            [ 1]  620 	ld	a, (0xd0, sp)
      000317 F7               [ 1]  621 	ld	(x), a
                                    622 ;	src/main.c: 58: for (uint8_t led_cnt = 0; led_cnt < 60; led_cnt++)
      000318 90 6C 96         [ 1]  623 	inc	(0x96, y)
      00031B 20 A1            [ 2]  624 	jra	00115$
      00031D                        625 00102$:
                                    626 ;	src/main.c: 66: for (uint8_t led_cnt = 0; led_cnt < 60; led_cnt++)
      00031D 90 6F 96         [ 1]  627 	clr	(0x96, y)
      000320                        628 00118$:
      000320 90 E6 96         [ 1]  629 	ld	a, (0x96, y)
      000323 A1 3C            [ 1]  630 	cp	a, #0x3c
      000325 24 47            [ 1]  631 	jrnc	00103$
                                    632 ;	src/main.c: 69: ws2812_send_pixel_24bits(color_buff[led_cnt][0], color_buff[led_cnt][1], color_buff[led_cnt][2]);
      000327 90 E6 96         [ 1]  633 	ld	a, (0x96, y)
      00032A 97               [ 1]  634 	ld	xl, a
      00032B A6 03            [ 1]  635 	ld	a, #0x03
      00032D 42               [ 4]  636 	mul	x, a
      00032E 90 EF 94         [ 2]  637 	ldw	(0x94, y), x
      000331 93               [ 1]  638 	ldw	x, y
      000332 EE 94            [ 2]  639 	ldw	x, (0x94, x)
      000334 89               [ 2]  640 	pushw	x
      000335 96               [ 1]  641 	ldw	x, sp
      000336 1C 00 D3         [ 2]  642 	addw	x, #211
      000339 72 FB 01         [ 2]  643 	addw	x, (1, sp)
      00033C 90 EF 92         [ 2]  644 	ldw	(0x92, y), x
      00033F 5B 02            [ 2]  645 	addw	sp, #2
      000341 93               [ 1]  646 	ldw	x, y
      000342 EE 92            [ 2]  647 	ldw	x, (0x92, x)
      000344 E6 02            [ 1]  648 	ld	a, (0x2, x)
      000346 90 E7 94         [ 1]  649 	ld	(0x94, y), a
      000349 93               [ 1]  650 	ldw	x, y
      00034A EE 92            [ 2]  651 	ldw	x, (0x92, x)
      00034C E6 01            [ 1]  652 	ld	a, (0x1, x)
      00034E 90 E7 95         [ 1]  653 	ld	(0x95, y), a
      000351 93               [ 1]  654 	ldw	x, y
      000352 EE 92            [ 2]  655 	ldw	x, (0x92, x)
      000354 F6               [ 1]  656 	ld	a, (x)
      000355 97               [ 1]  657 	ld	xl, a
      000356 90 89            [ 2]  658 	pushw	y
      000358 90 E6 94         [ 1]  659 	ld	a, (0x94, y)
      00035B 88               [ 1]  660 	push	a
      00035C 90 E6 95         [ 1]  661 	ld	a, (0x95, y)
      00035F 88               [ 1]  662 	push	a
      000360 9F               [ 1]  663 	ld	a, xl
      000361 88               [ 1]  664 	push	a
      000362 CDr00r00         [ 4]  665 	call	_ws2812_send_pixel_24bits
      000365 5B 03            [ 2]  666 	addw	sp, #3
      000367 90 85            [ 2]  667 	popw	y
                                    668 ;	src/main.c: 66: for (uint8_t led_cnt = 0; led_cnt < 60; led_cnt++)
      000369 90 6C 96         [ 1]  669 	inc	(0x96, y)
      00036C 20 B2            [ 2]  670 	jra	00118$
      00036E                        671 00103$:
                                    672 ;	src/main.c: 73: ws2812_send_latch();
      00036E 90 89            [ 2]  673 	pushw	y
      000370 CDr00r00         [ 4]  674 	call	_ws2812_send_latch
      000373 4B 14            [ 1]  675 	push	#0x14
      000375 96               [ 1]  676 	ldw	x, sp
      000376 1C 00 D0         [ 2]  677 	addw	x, #208
      000379 89               [ 2]  678 	pushw	x
      00037A 96               [ 1]  679 	ldw	x, sp
      00037B 1C 00 D1         [ 2]  680 	addw	x, #209
      00037E 89               [ 2]  681 	pushw	x
      00037F 96               [ 1]  682 	ldw	x, sp
      000380 1C 00 D2         [ 2]  683 	addw	x, #210
      000383 89               [ 2]  684 	pushw	x
      000384 CDr03rCA         [ 4]  685 	call	_get_next_color
      000387 5B 07            [ 2]  686 	addw	sp, #7
      000389 90 85            [ 2]  687 	popw	y
                                    688 ;	src/main.c: 75: r_temp = red, g_temp = green, b_temp = blue;
      00038B 7B CB            [ 1]  689 	ld	a, (0xcb, sp)
      00038D 6B CE            [ 1]  690 	ld	(0xce, sp), a
      00038F 7B CC            [ 1]  691 	ld	a, (0xcc, sp)
      000391 6B CF            [ 1]  692 	ld	(0xcf, sp), a
      000393 7B CD            [ 1]  693 	ld	a, (0xcd, sp)
      000395 6B D0            [ 1]  694 	ld	(0xd0, sp), a
                                    695 ;	src/main.c: 92: for (uint32_t jj = 0; jj < 10000; jj++);
      000397 5F               [ 1]  696 	clrw	x
      000398 90 6F 94         [ 1]  697 	clr	(0x94, y)
      00039B 90 6F 93         [ 1]  698 	clr	(0x93, y)
      00039E                        699 00121$:
      00039E A3 27 10         [ 2]  700 	cpw	x, #0x2710
      0003A1 90 E6 94         [ 1]  701 	ld	a, (0x94, y)
      0003A4 A2 00            [ 1]  702 	sbc	a, #0x00
      0003A6 90 E6 93         [ 1]  703 	ld	a, (0x93, y)
      0003A9 A2 00            [ 1]  704 	sbc	a, #0x00
      0003AB 25 03            [ 1]  705 	jrc	00176$
      0003AD CCr02rBB         [ 2]  706 	jp	00128$
      0003B0                        707 00176$:
      0003B0 1C 00 01         [ 2]  708 	addw	x, #0x0001
      0003B3 90 E6 94         [ 1]  709 	ld	a, (0x94, y)
      0003B6 A9 00            [ 1]  710 	adc	a, #0x00
      0003B8 90 E7 94         [ 1]  711 	ld	(0x94, y), a
      0003BB 90 E6 93         [ 1]  712 	ld	a, (0x93, y)
      0003BE A9 00            [ 1]  713 	adc	a, #0x00
      0003C0 90 E7 93         [ 1]  714 	ld	(0x93, y), a
      0003C3 20 D9            [ 2]  715 	jra	00121$
                                    716 ;	src/main.c: 98: while(1);
                                    717 ;	src/main.c: 99: }
      0003C5 5B FF            [ 2]  718 	addw	sp, #255
      0003C7 5B 8A            [ 2]  719 	addw	sp, #138
      0003C9 81               [ 4]  720 	ret
                                    721 ;	src/main.c: 101: void get_next_color(uint8_t *r, uint8_t *g, uint8_t *b, uint8_t step)
                                    722 ;	-----------------------------------------
                                    723 ;	 function get_next_color
                                    724 ;	-----------------------------------------
      0003CA                        725 _get_next_color:
      0003CA 52 12            [ 2]  726 	sub	sp, #18
                                    727 ;	src/main.c: 103: while (step--)
      0003CC 16 19            [ 2]  728 	ldw	y, (0x19, sp)
      0003CE 17 01            [ 2]  729 	ldw	(0x01, sp), y
      0003D0 17 03            [ 2]  730 	ldw	(0x03, sp), y
      0003D2 16 01            [ 2]  731 	ldw	y, (0x01, sp)
      0003D4 17 05            [ 2]  732 	ldw	(0x05, sp), y
      0003D6 16 01            [ 2]  733 	ldw	y, (0x01, sp)
      0003D8 17 07            [ 2]  734 	ldw	(0x07, sp), y
      0003DA 7B 1B            [ 1]  735 	ld	a, (0x1b, sp)
      0003DC 6B 12            [ 1]  736 	ld	(0x12, sp), a
      0003DE                        737 00130$:
      0003DE 7B 12            [ 1]  738 	ld	a, (0x12, sp)
      0003E0 0A 12            [ 1]  739 	dec	(0x12, sp)
      0003E2 4D               [ 1]  740 	tnz	a
      0003E3 26 03            [ 1]  741 	jrne	00236$
      0003E5 CCr04rA6         [ 2]  742 	jp	00133$
      0003E8                        743 00236$:
                                    744 ;	src/main.c: 105: if (*r == 255 && *b == 0 && *g < 255)
      0003E8 16 15            [ 2]  745 	ldw	y, (0x15, sp)
      0003EA 17 09            [ 2]  746 	ldw	(0x09, sp), y
      0003EC 93               [ 1]  747 	ldw	x, y
      0003ED F6               [ 1]  748 	ld	a, (x)
      0003EE 6B 0B            [ 1]  749 	ld	(0x0b, sp), a
      0003F0 16 17            [ 2]  750 	ldw	y, (0x17, sp)
                                    751 ;	src/main.c: 107: else if ( *g == 255 && *b == 0 && *r > 0)
      0003F2 17 0C            [ 2]  752 	ldw	(0x0c, sp), y
      0003F4 93               [ 1]  753 	ldw	x, y
      0003F5 F6               [ 1]  754 	ld	a, (x)
      0003F6 6B 0E            [ 1]  755 	ld	(0x0e, sp), a
                                    756 ;	src/main.c: 105: if (*r == 255 && *b == 0 && *g < 255)
      0003F8 7B 0B            [ 1]  757 	ld	a, (0x0b, sp)
      0003FA 4C               [ 1]  758 	inc	a
      0003FB 26 05            [ 1]  759 	jrne	00238$
      0003FD A6 01            [ 1]  760 	ld	a, #0x01
      0003FF 6B 0F            [ 1]  761 	ld	(0x0f, sp), a
      000401 C5                     762 	.byte 0xc5
      000402                        763 00238$:
      000402 0F 0F            [ 1]  764 	clr	(0x0f, sp)
      000404                        765 00239$:
                                    766 ;	src/main.c: 106: (*g) += 1;
      000404 7B 0E            [ 1]  767 	ld	a, (0x0e, sp)
      000406 6B 10            [ 1]  768 	ld	(0x10, sp), a
                                    769 ;	src/main.c: 105: if (*r == 255 && *b == 0 && *g < 255)
      000408 0D 0F            [ 1]  770 	tnz	(0x0f, sp)
      00040A 27 13            [ 1]  771 	jreq	00126$
      00040C 1E 01            [ 2]  772 	ldw	x, (0x01, sp)
      00040E F6               [ 1]  773 	ld	a, (x)
      00040F 26 0E            [ 1]  774 	jrne	00126$
      000411 7B 0E            [ 1]  775 	ld	a, (0x0e, sp)
      000413 A1 FF            [ 1]  776 	cp	a, #0xff
      000415 24 08            [ 1]  777 	jrnc	00126$
                                    778 ;	src/main.c: 106: (*g) += 1;
      000417 7B 10            [ 1]  779 	ld	a, (0x10, sp)
      000419 4C               [ 1]  780 	inc	a
      00041A 1E 0C            [ 2]  781 	ldw	x, (0x0c, sp)
      00041C F7               [ 1]  782 	ld	(x), a
      00041D 20 BF            [ 2]  783 	jra	00130$
      00041F                        784 00126$:
                                    785 ;	src/main.c: 107: else if ( *g == 255 && *b == 0 && *r > 0)
      00041F 7B 0E            [ 1]  786 	ld	a, (0x0e, sp)
      000421 4C               [ 1]  787 	inc	a
      000422 26 05            [ 1]  788 	jrne	00244$
      000424 A6 01            [ 1]  789 	ld	a, #0x01
      000426 6B 11            [ 1]  790 	ld	(0x11, sp), a
      000428 C5                     791 	.byte 0xc5
      000429                        792 00244$:
      000429 0F 11            [ 1]  793 	clr	(0x11, sp)
      00042B                        794 00245$:
                                    795 ;	src/main.c: 108: (*r) -= 1;
      00042B 7B 0B            [ 1]  796 	ld	a, (0x0b, sp)
      00042D 90 97            [ 1]  797 	ld	yl, a
                                    798 ;	src/main.c: 107: else if ( *g == 255 && *b == 0 && *r > 0)
      00042F 0D 11            [ 1]  799 	tnz	(0x11, sp)
      000431 27 11            [ 1]  800 	jreq	00121$
      000433 1E 03            [ 2]  801 	ldw	x, (0x03, sp)
      000435 F6               [ 1]  802 	ld	a, (x)
      000436 26 0C            [ 1]  803 	jrne	00121$
      000438 0D 0B            [ 1]  804 	tnz	(0x0b, sp)
      00043A 27 08            [ 1]  805 	jreq	00121$
                                    806 ;	src/main.c: 108: (*r) -= 1;
      00043C 90 9F            [ 1]  807 	ld	a, yl
      00043E 4A               [ 1]  808 	dec	a
      00043F 1E 09            [ 2]  809 	ldw	x, (0x09, sp)
      000441 F7               [ 1]  810 	ld	(x), a
      000442 20 9A            [ 2]  811 	jra	00130$
      000444                        812 00121$:
                                    813 ;	src/main.c: 109: else if (*r == 0 && *g == 255 && *b < 255)
      000444 0D 0B            [ 1]  814 	tnz	(0x0b, sp)
      000446 26 11            [ 1]  815 	jrne	00116$
      000448 0D 11            [ 1]  816 	tnz	(0x11, sp)
      00044A 27 0D            [ 1]  817 	jreq	00116$
      00044C 1E 01            [ 2]  818 	ldw	x, (0x01, sp)
      00044E F6               [ 1]  819 	ld	a, (x)
      00044F A1 FF            [ 1]  820 	cp	a, #0xff
      000451 24 06            [ 1]  821 	jrnc	00116$
                                    822 ;	src/main.c: 110: (*b) += 1;
      000453 4C               [ 1]  823 	inc	a
      000454 1E 01            [ 2]  824 	ldw	x, (0x01, sp)
      000456 F7               [ 1]  825 	ld	(x), a
      000457 20 85            [ 2]  826 	jra	00130$
      000459                        827 00116$:
                                    828 ;	src/main.c: 111: else if (*r == 0 && *b == 255 && *g > 0)
      000459 0D 0B            [ 1]  829 	tnz	(0x0b, sp)
      00045B 26 13            [ 1]  830 	jrne	00111$
      00045D 1E 05            [ 2]  831 	ldw	x, (0x05, sp)
      00045F F6               [ 1]  832 	ld	a, (x)
      000460 4C               [ 1]  833 	inc	a
      000461 26 0D            [ 1]  834 	jrne	00111$
      000463 0D 0E            [ 1]  835 	tnz	(0x0e, sp)
      000465 27 09            [ 1]  836 	jreq	00111$
                                    837 ;	src/main.c: 112: (*g) -= 1;
      000467 7B 10            [ 1]  838 	ld	a, (0x10, sp)
      000469 4A               [ 1]  839 	dec	a
      00046A 1E 0C            [ 2]  840 	ldw	x, (0x0c, sp)
      00046C F7               [ 1]  841 	ld	(x), a
      00046D CCr03rDE         [ 2]  842 	jp	00130$
      000470                        843 00111$:
                                    844 ;	src/main.c: 113: else if (*g == 0 && *b == 255 && *r < 255)
      000470 0D 0E            [ 1]  845 	tnz	(0x0e, sp)
      000472 26 15            [ 1]  846 	jrne	00106$
      000474 1E 07            [ 2]  847 	ldw	x, (0x07, sp)
      000476 F6               [ 1]  848 	ld	a, (x)
      000477 4C               [ 1]  849 	inc	a
      000478 26 0F            [ 1]  850 	jrne	00106$
      00047A 7B 0B            [ 1]  851 	ld	a, (0x0b, sp)
      00047C A1 FF            [ 1]  852 	cp	a, #0xff
      00047E 24 09            [ 1]  853 	jrnc	00106$
                                    854 ;	src/main.c: 114: (*r) += 1;
      000480 90 9F            [ 1]  855 	ld	a, yl
      000482 4C               [ 1]  856 	inc	a
      000483 1E 09            [ 2]  857 	ldw	x, (0x09, sp)
      000485 F7               [ 1]  858 	ld	(x), a
      000486 CCr03rDE         [ 2]  859 	jp	00130$
      000489                        860 00106$:
                                    861 ;	src/main.c: 115: else if (*r == 255 && *g == 0 && *b > 0)
      000489 0D 0F            [ 1]  862 	tnz	(0x0f, sp)
      00048B 26 03            [ 1]  863 	jrne	00262$
      00048D CCr03rDE         [ 2]  864 	jp	00130$
      000490                        865 00262$:
      000490 0D 0E            [ 1]  866 	tnz	(0x0e, sp)
      000492 27 03            [ 1]  867 	jreq	00263$
      000494 CCr03rDE         [ 2]  868 	jp	00130$
      000497                        869 00263$:
      000497 1E 01            [ 2]  870 	ldw	x, (0x01, sp)
      000499 F6               [ 1]  871 	ld	a, (x)
      00049A 26 03            [ 1]  872 	jrne	00264$
      00049C CCr03rDE         [ 2]  873 	jp	00130$
      00049F                        874 00264$:
                                    875 ;	src/main.c: 116: (*b) -= 1;
      00049F 4A               [ 1]  876 	dec	a
      0004A0 1E 01            [ 2]  877 	ldw	x, (0x01, sp)
      0004A2 F7               [ 1]  878 	ld	(x), a
      0004A3 CCr03rDE         [ 2]  879 	jp	00130$
      0004A6                        880 00133$:
                                    881 ;	src/main.c: 118: }
      0004A6 5B 12            [ 2]  882 	addw	sp, #18
      0004A8 81               [ 4]  883 	ret
                                    884 ;	src/main.c: 120: void uart_init()
                                    885 ;	-----------------------------------------
                                    886 ;	 function uart_init
                                    887 ;	-----------------------------------------
      0004A9                        888 _uart_init:
                                    889 ;	src/main.c: 123: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      0004A9 72 16 52 35      [ 1]  890 	bset	21045, #3
                                    891 ;	src/main.c: 125: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      0004AD C6 52 36         [ 1]  892 	ld	a, 0x5236
      0004B0 A4 CF            [ 1]  893 	and	a, #0xcf
      0004B2 C7 52 36         [ 1]  894 	ld	0x5236, a
                                    895 ;	src/main.c: 127: UART1_BRR2 = 0x01; UART1_BRR1 = 0x34; // 0x0341 coded funky way (see page 365 and 336 of ref manual)
      0004B5 35 01 52 33      [ 1]  896 	mov	0x5233+0, #0x01
      0004B9 35 34 52 32      [ 1]  897 	mov	0x5232+0, #0x34
                                    898 ;	src/main.c: 128: }
      0004BD 81               [ 4]  899 	ret
                                    900 ;	src/main.c: 131: uint16_t uart_write(const char *str) {
                                    901 ;	-----------------------------------------
                                    902 ;	 function uart_write
                                    903 ;	-----------------------------------------
      0004BE                        904 _uart_write:
      0004BE 52 03            [ 2]  905 	sub	sp, #3
                                    906 ;	src/main.c: 133: for(i = 0; i < strlen(str); i++) {
      0004C0 0F 03            [ 1]  907 	clr	(0x03, sp)
      0004C2                        908 00106$:
      0004C2 1E 06            [ 2]  909 	ldw	x, (0x06, sp)
      0004C4 89               [ 2]  910 	pushw	x
      0004C5 CDr00r00         [ 4]  911 	call	_strlen
      0004C8 5B 02            [ 2]  912 	addw	sp, #2
      0004CA 1F 01            [ 2]  913 	ldw	(0x01, sp), x
      0004CC 5F               [ 1]  914 	clrw	x
      0004CD 7B 03            [ 1]  915 	ld	a, (0x03, sp)
      0004CF 97               [ 1]  916 	ld	xl, a
      0004D0 13 01            [ 2]  917 	cpw	x, (0x01, sp)
      0004D2 24 14            [ 1]  918 	jrnc	00104$
                                    919 ;	src/main.c: 134: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      0004D4                        920 00101$:
      0004D4 C6 52 30         [ 1]  921 	ld	a, 0x5230
      0004D7 2A FB            [ 1]  922 	jrpl	00101$
                                    923 ;	src/main.c: 135: UART1_DR = str[i];
      0004D9 5F               [ 1]  924 	clrw	x
      0004DA 7B 03            [ 1]  925 	ld	a, (0x03, sp)
      0004DC 97               [ 1]  926 	ld	xl, a
      0004DD 72 FB 06         [ 2]  927 	addw	x, (0x06, sp)
      0004E0 F6               [ 1]  928 	ld	a, (x)
      0004E1 C7 52 31         [ 1]  929 	ld	0x5231, a
                                    930 ;	src/main.c: 133: for(i = 0; i < strlen(str); i++) {
      0004E4 0C 03            [ 1]  931 	inc	(0x03, sp)
      0004E6 20 DA            [ 2]  932 	jra	00106$
      0004E8                        933 00104$:
                                    934 ;	src/main.c: 137: return(i); // Bytes sent
      0004E8 7B 03            [ 1]  935 	ld	a, (0x03, sp)
      0004EA 5F               [ 1]  936 	clrw	x
      0004EB 97               [ 1]  937 	ld	xl, a
                                    938 ;	src/main.c: 138: }
      0004EC 5B 03            [ 2]  939 	addw	sp, #3
      0004EE 81               [ 4]  940 	ret
                                    941 ;	src/main.c: 140: void uart_write_8bits(uint8_t d)
                                    942 ;	-----------------------------------------
                                    943 ;	 function uart_write_8bits
                                    944 ;	-----------------------------------------
      0004EF                        945 _uart_write_8bits:
                                    946 ;	src/main.c: 142: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      0004EF                        947 00101$:
      0004EF C6 52 30         [ 1]  948 	ld	a, 0x5230
      0004F2 2A FB            [ 1]  949 	jrpl	00101$
                                    950 ;	src/main.c: 143: UART1_DR = d;
      0004F4 AE 52 31         [ 2]  951 	ldw	x, #0x5231
      0004F7 7B 03            [ 1]  952 	ld	a, (0x03, sp)
      0004F9 F7               [ 1]  953 	ld	(x), a
                                    954 ;	src/main.c: 144: }
      0004FA 81               [ 4]  955 	ret
                                    956 ;	src/main.c: 147: void int_to_hex_str(uint32_t dec, char *hex_str, uint8_t hex_str_len)
                                    957 ;	-----------------------------------------
                                    958 ;	 function int_to_hex_str
                                    959 ;	-----------------------------------------
      0004FB                        960 _int_to_hex_str:
      0004FB 52 03            [ 2]  961 	sub	sp, #3
                                    962 ;	src/main.c: 150: while(hex_str_len)
      0004FD 7B 0C            [ 1]  963 	ld	a, (0x0c, sp)
      0004FF 6B 03            [ 1]  964 	ld	(0x03, sp), a
      000501                        965 00101$:
      000501 0D 03            [ 1]  966 	tnz	(0x03, sp)
      000503 27 37            [ 1]  967 	jreq	00104$
                                    968 ;	src/main.c: 152: uint8_t masked_dec = (dec & mask);
      000505 7B 09            [ 1]  969 	ld	a, (0x09, sp)
      000507 A4 0F            [ 1]  970 	and	a, #0x0f
                                    971 ;	src/main.c: 153: hex_str[hex_str_len - 1] = (masked_dec < 10) ? (masked_dec + '0') : (masked_dec + '7');
      000509 5F               [ 1]  972 	clrw	x
      00050A 41               [ 1]  973 	exg	a, xl
      00050B 7B 03            [ 1]  974 	ld	a, (0x03, sp)
      00050D 41               [ 1]  975 	exg	a, xl
      00050E 5A               [ 2]  976 	decw	x
      00050F 72 FB 0A         [ 2]  977 	addw	x, (0x0a, sp)
      000512 1F 01            [ 2]  978 	ldw	(0x01, sp), x
      000514 97               [ 1]  979 	ld	xl, a
      000515 A1 0A            [ 1]  980 	cp	a, #0x0a
      000517 24 05            [ 1]  981 	jrnc	00106$
      000519 9F               [ 1]  982 	ld	a, xl
      00051A AB 30            [ 1]  983 	add	a, #0x30
      00051C 20 03            [ 2]  984 	jra	00107$
      00051E                        985 00106$:
      00051E 9F               [ 1]  986 	ld	a, xl
      00051F AB 37            [ 1]  987 	add	a, #0x37
      000521                        988 00107$:
      000521 1E 01            [ 2]  989 	ldw	x, (0x01, sp)
      000523 F7               [ 1]  990 	ld	(x), a
                                    991 ;	src/main.c: 155: dec >>= 4;
      000524 1E 08            [ 2]  992 	ldw	x, (0x08, sp)
      000526 16 06            [ 2]  993 	ldw	y, (0x06, sp)
      000528 90 54            [ 2]  994 	srlw	y
      00052A 56               [ 2]  995 	rrcw	x
      00052B 90 54            [ 2]  996 	srlw	y
      00052D 56               [ 2]  997 	rrcw	x
      00052E 90 54            [ 2]  998 	srlw	y
      000530 56               [ 2]  999 	rrcw	x
      000531 90 54            [ 2] 1000 	srlw	y
      000533 56               [ 2] 1001 	rrcw	x
      000534 1F 08            [ 2] 1002 	ldw	(0x08, sp), x
      000536 17 06            [ 2] 1003 	ldw	(0x06, sp), y
                                   1004 ;	src/main.c: 156: hex_str_len--;
      000538 0A 03            [ 1] 1005 	dec	(0x03, sp)
      00053A 20 C5            [ 2] 1006 	jra	00101$
      00053C                       1007 00104$:
                                   1008 ;	src/main.c: 158: }
      00053C 5B 03            [ 2] 1009 	addw	sp, #3
      00053E 81               [ 4] 1010 	ret
                                   1011 	.area CODE
                                   1012 	.area CONST
                                   1013 	.area INITIALIZER
                                   1014 	.area CABS (ABS)
