                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _strlen
                                     13 	.globl _spi_init
                                     14 	.globl _uart_init
                                     15 	.globl _gpio_init
                                     16 	.globl _uart_write
                                     17 ;--------------------------------------------------------
                                     18 ; ram data
                                     19 ;--------------------------------------------------------
                                     20 	.area DATA
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area INITIALIZED
                                     25 ;--------------------------------------------------------
                                     26 ; Stack segment in internal ram 
                                     27 ;--------------------------------------------------------
                                     28 	.area	SSEG
      000000                         29 __start__stack:
      000000                         30 	.ds	1
                                     31 
                                     32 ;--------------------------------------------------------
                                     33 ; absolute external ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DABS (ABS)
                                     36 
                                     37 ; default segment ordering for linker
                                     38 	.area HOME
                                     39 	.area GSINIT
                                     40 	.area GSFINAL
                                     41 	.area CONST
                                     42 	.area INITIALIZER
                                     43 	.area CODE
                                     44 
                                     45 ;--------------------------------------------------------
                                     46 ; interrupt vector 
                                     47 ;--------------------------------------------------------
                                     48 	.area HOME
      000000                         49 __interrupt_vect:
      000000 82v00u00u00             50 	int s_GSINIT ; reset
                                     51 ;--------------------------------------------------------
                                     52 ; global & static initialisations
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
                                     55 	.area GSINIT
                                     56 	.area GSFINAL
                                     57 	.area GSINIT
      000000                         58 __sdcc_gs_init_startup:
      000000                         59 __sdcc_init_data:
                                     60 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   61 	ldw x, #l_DATA
      000003 27 07            [ 1]   62 	jreq	00002$
      000005                         63 00001$:
      000005 72 4FuFFuFF      [ 1]   64 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   65 	decw x
      00000A 26 F9            [ 1]   66 	jrne	00001$
      00000C                         67 00002$:
      00000C AEr00r00         [ 2]   68 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   69 	jreq	00004$
      000011                         70 00003$:
      000011 D6uFFuFF         [ 1]   71 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   72 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   73 	decw	x
      000018 26 F7            [ 1]   74 	jrne	00003$
      00001A                         75 00004$:
                                     76 ; stm8_genXINIT() end
                                     77 	.area GSFINAL
      000000 CCr00r04         [ 2]   78 	jp	__sdcc_program_startup
                                     79 ;--------------------------------------------------------
                                     80 ; Home
                                     81 ;--------------------------------------------------------
                                     82 	.area HOME
                                     83 	.area HOME
      000004                         84 __sdcc_program_startup:
      000004 CCr00r00         [ 2]   85 	jp	_main
                                     86 ;	return from main will return to caller
                                     87 ;--------------------------------------------------------
                                     88 ; code
                                     89 ;--------------------------------------------------------
                                     90 	.area CODE
                                     91 ;	src/main.c: 14: void main(void)
                                     92 ;	-----------------------------------------
                                     93 ;	 function main
                                     94 ;	-----------------------------------------
      000000                         95 _main:
      000000 52 08            [ 2]   96 	sub	sp, #8
                                     97 ;	src/main.c: 17: CLK_CKDIVR = 0;
      000002 35 00 50 C6      [ 1]   98 	mov	0x50c6+0, #0x00
                                     99 ;	src/main.c: 18: uart_init();
      000006 CDr00r5A         [ 4]  100 	call	_uart_init
                                    101 ;	src/main.c: 20: while(1)
      000009                        102 00103$:
                                    103 ;	src/main.c: 22: uart_write("Hello World!\r\n");
      000009 4Br00            [ 1]  104 	push	#<(___str_0 + 0)
      00000B 4Bs00            [ 1]  105 	push	#((___str_0 + 0) >> 8)
      00000D CDr00r70         [ 4]  106 	call	_uart_write
      000010 5B 02            [ 2]  107 	addw	sp, #2
                                    108 ;	src/main.c: 23: for(uint64_t i = 0; i < 10000; i++);
      000012 5F               [ 1]  109 	clrw	x
      000013 1F 07            [ 2]  110 	ldw	(0x07, sp), x
      000015 1F 05            [ 2]  111 	ldw	(0x05, sp), x
      000017 1F 03            [ 2]  112 	ldw	(0x03, sp), x
      000019 1F 01            [ 2]  113 	ldw	(0x01, sp), x
      00001B                        114 00106$:
      00001B 1E 07            [ 2]  115 	ldw	x, (0x07, sp)
      00001D A3 27 10         [ 2]  116 	cpw	x, #0x2710
      000020 7B 06            [ 1]  117 	ld	a, (0x06, sp)
      000022 A2 00            [ 1]  118 	sbc	a, #0x00
      000024 7B 05            [ 1]  119 	ld	a, (0x05, sp)
      000026 A2 00            [ 1]  120 	sbc	a, #0x00
      000028 7B 04            [ 1]  121 	ld	a, (0x04, sp)
      00002A A2 00            [ 1]  122 	sbc	a, #0x00
      00002C 7B 03            [ 1]  123 	ld	a, (0x03, sp)
      00002E A2 00            [ 1]  124 	sbc	a, #0x00
      000030 7B 02            [ 1]  125 	ld	a, (0x02, sp)
      000032 A2 00            [ 1]  126 	sbc	a, #0x00
      000034 7B 01            [ 1]  127 	ld	a, (0x01, sp)
      000036 A2 00            [ 1]  128 	sbc	a, #0x00
      000038 24 CF            [ 1]  129 	jrnc	00103$
      00003A 1E 07            [ 2]  130 	ldw	x, (0x07, sp)
      00003C 5C               [ 1]  131 	incw	x
      00003D 1F 07            [ 2]  132 	ldw	(0x07, sp), x
      00003F 26 DA            [ 1]  133 	jrne	00106$
      000041 1E 05            [ 2]  134 	ldw	x, (0x05, sp)
      000043 5C               [ 1]  135 	incw	x
      000044 1F 05            [ 2]  136 	ldw	(0x05, sp), x
      000046 26 D3            [ 1]  137 	jrne	00106$
      000048 1E 03            [ 2]  138 	ldw	x, (0x03, sp)
      00004A 5C               [ 1]  139 	incw	x
      00004B 1F 03            [ 2]  140 	ldw	(0x03, sp), x
      00004D 26 CC            [ 1]  141 	jrne	00106$
      00004F 1E 01            [ 2]  142 	ldw	x, (0x01, sp)
      000051 5C               [ 1]  143 	incw	x
      000052 1F 01            [ 2]  144 	ldw	(0x01, sp), x
      000054 20 C5            [ 2]  145 	jra	00106$
                                    146 ;	src/main.c: 26: }
      000056 5B 08            [ 2]  147 	addw	sp, #8
      000058 81               [ 4]  148 	ret
                                    149 ;	src/main.c: 28: void spi_init()
                                    150 ;	-----------------------------------------
                                    151 ;	 function spi_init
                                    152 ;	-----------------------------------------
      000059                        153 _spi_init:
                                    154 ;	src/main.c: 31: }
      000059 81               [ 4]  155 	ret
                                    156 ;	src/main.c: 33: void uart_init()
                                    157 ;	-----------------------------------------
                                    158 ;	 function uart_init
                                    159 ;	-----------------------------------------
      00005A                        160 _uart_init:
                                    161 ;	src/main.c: 36: UART1_CR2 |= UART_CR2_TEN; // Transmitter enable
      00005A 72 16 52 35      [ 1]  162 	bset	21045, #3
                                    163 ;	src/main.c: 38: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
      00005E C6 52 36         [ 1]  164 	ld	a, 0x5236
      000061 A4 CF            [ 1]  165 	and	a, #0xcf
      000063 C7 52 36         [ 1]  166 	ld	0x5236, a
                                    167 ;	src/main.c: 40: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 0x0683 coded funky way (see page 365 and 336 of ref manual)
      000066 35 03 52 33      [ 1]  168 	mov	0x5233+0, #0x03
      00006A 35 68 52 32      [ 1]  169 	mov	0x5232+0, #0x68
                                    170 ;	src/main.c: 41: }
      00006E 81               [ 4]  171 	ret
                                    172 ;	src/main.c: 43: void gpio_init()
                                    173 ;	-----------------------------------------
                                    174 ;	 function gpio_init
                                    175 ;	-----------------------------------------
      00006F                        176 _gpio_init:
                                    177 ;	src/main.c: 46: }
      00006F 81               [ 4]  178 	ret
                                    179 ;	src/main.c: 48: uint16_t uart_write(const char *str) {
                                    180 ;	-----------------------------------------
                                    181 ;	 function uart_write
                                    182 ;	-----------------------------------------
      000070                        183 _uart_write:
      000070 52 03            [ 2]  184 	sub	sp, #3
                                    185 ;	src/main.c: 50: for(i = 0; i < strlen(str); i++) {
      000072 0F 03            [ 1]  186 	clr	(0x03, sp)
      000074                        187 00106$:
      000074 1E 06            [ 2]  188 	ldw	x, (0x06, sp)
      000076 89               [ 2]  189 	pushw	x
      000077 CDr00r00         [ 4]  190 	call	_strlen
      00007A 5B 02            [ 2]  191 	addw	sp, #2
      00007C 1F 01            [ 2]  192 	ldw	(0x01, sp), x
      00007E 5F               [ 1]  193 	clrw	x
      00007F 7B 03            [ 1]  194 	ld	a, (0x03, sp)
      000081 97               [ 1]  195 	ld	xl, a
      000082 13 01            [ 2]  196 	cpw	x, (0x01, sp)
      000084 24 14            [ 1]  197 	jrnc	00104$
                                    198 ;	src/main.c: 51: while(!(UART1_SR & UART_SR_TXE)); // !Transmit data register empty
      000086                        199 00101$:
      000086 C6 52 30         [ 1]  200 	ld	a, 0x5230
      000089 2A FB            [ 1]  201 	jrpl	00101$
                                    202 ;	src/main.c: 52: UART1_DR = str[i];
      00008B 5F               [ 1]  203 	clrw	x
      00008C 7B 03            [ 1]  204 	ld	a, (0x03, sp)
      00008E 97               [ 1]  205 	ld	xl, a
      00008F 72 FB 06         [ 2]  206 	addw	x, (0x06, sp)
      000092 F6               [ 1]  207 	ld	a, (x)
      000093 C7 52 31         [ 1]  208 	ld	0x5231, a
                                    209 ;	src/main.c: 50: for(i = 0; i < strlen(str); i++) {
      000096 0C 03            [ 1]  210 	inc	(0x03, sp)
      000098 20 DA            [ 2]  211 	jra	00106$
      00009A                        212 00104$:
                                    213 ;	src/main.c: 54: return(i); // Bytes sent
      00009A 7B 03            [ 1]  214 	ld	a, (0x03, sp)
      00009C 5F               [ 1]  215 	clrw	x
      00009D 97               [ 1]  216 	ld	xl, a
                                    217 ;	src/main.c: 55: }
      00009E 5B 03            [ 2]  218 	addw	sp, #3
      0000A0 81               [ 4]  219 	ret
                                    220 	.area CODE
                                    221 	.area CONST
                                    222 	.area CONST
      000000                        223 ___str_0:
      000000 48 65 6C 6C 6F 20 57   224 	.ascii "Hello World!"
             6F 72 6C 64 21
      00000C 0D                     225 	.db 0x0d
      00000D 0A                     226 	.db 0x0a
      00000E 00                     227 	.db 0x00
                                    228 	.area CODE
                                    229 	.area INITIALIZER
                                    230 	.area CABS (ABS)
